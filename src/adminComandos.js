const { atualizarStatusPedido, STATUS_PEDIDO, buscarPedidoAtivo, buscarPedidosAtivos } = require('./database');

// N√∫meros autorizados a usar comandos administrativos
const NUMEROS_ADMIN = [
    '553172466905@c.us',  // N√∫mero admin
    '553198537881@c.us'
];

let whatsappClient = null;

function inicializarAdmin(client) {
    whatsappClient = client;
    console.log('Sistema administrativo inicializado');
    console.log('Admins configurados:', NUMEROS_ADMIN);
}

const COMANDOS_ADMIN = {
    '/confirmar': STATUS_PEDIDO.CONFIRMADO,
    '/preparando': STATUS_PEDIDO.PREPARANDO,
    '/saiuentrega': STATUS_PEDIDO.SAIU_ENTREGA,
    '/entregue': STATUS_PEDIDO.ENTREGUE,
    '/cancelar': STATUS_PEDIDO.CANCELADO,
    '/pedidos': 'listar_pedidos' // Novo comando
};

async function processarComandoAdmin(message) {
    // Log para debug
    console.log('Verificando comando admin:', message.body);
    console.log('Remetente:', message.from);
    console.log('N√∫mero formatado:', formatarNumeroAdmin(message.from));
    console.log('√â admin?', NUMEROS_ADMIN.includes(formatarNumeroAdmin(message.from)));

    // Verifica se √© um n√∫mero autorizado usando o n√∫mero formatado
    if (!NUMEROS_ADMIN.includes(formatarNumeroAdmin(message.from))) {
        console.log('Acesso negado para:', message.from);
        return false;
    }

    const texto = message.body.toLowerCase().trim();
    const partes = texto.split(' ');
    const comando = partes[0];

    console.log('Comando recebido:', comando);

    // Comando para listar pedidos
    if (comando === '/pedidos') {
        await listarPedidosAtivos(message);
        return true;
    }

    const numeroPedido = partes[1];

    if (!COMANDOS_ADMIN[comando]) {
        console.log('Comando n√£o reconhecido:', comando);
        await message.reply('‚ùå Comando n√£o reconhecido. Digite /ajuda para ver os comandos dispon√≠veis.');
        return true;
    }

    if (!numeroPedido) {
        console.log('N√∫mero do pedido n√£o fornecido');
        await message.reply('‚ùå Por favor, informe o n√∫mero do pedido. Exemplo: /confirmar 123');
        return true;
    }

    try {
        await atualizarStatusPedido(numeroPedido, COMANDOS_ADMIN[comando]);
        const mensagemConfirmacao = await gerarMensagemConfirmacao(numeroPedido, COMANDOS_ADMIN[comando]);
        await message.reply(mensagemConfirmacao);
        
        // Notifica o cliente sobre a atualiza√ß√£o
        await notificarCliente(numeroPedido, COMANDOS_ADMIN[comando]);
        return true;
    } catch (error) {
        console.error('Erro ao processar comando admin:', error);
        await message.reply('‚ùå Erro ao atualizar status do pedido. Verifique o n√∫mero do pedido.');
        return true;
    }
}

async function gerarMensagemConfirmacao(numeroPedido, status) {
    let mensagem = `*üîÑ Status Atualizado*\n\n`;
    mensagem += `Pedido #${numeroPedido}\n`;
    
    switch (status) {
        case STATUS_PEDIDO.CONFIRMADO:
            mensagem += '‚úÖ Pedido confirmado com sucesso';
            break;
        case STATUS_PEDIDO.PREPARANDO:
            mensagem += 'üë®‚Äçüç≥ Pedido em preparo';
            break;
        case STATUS_PEDIDO.SAIU_ENTREGA:
            mensagem += 'üõµ Pedido saiu para entrega';
            break;
        case STATUS_PEDIDO.ENTREGUE:
            mensagem += 'üéâ Pedido marcado como entregue';
            break;
        case STATUS_PEDIDO.CANCELADO:
            mensagem += '‚ùå Pedido cancelado';
            break;
    }

    return mensagem;
}

async function listarPedidosAtivos(message) {
    try {
        const pedidos = await buscarPedidosAtivos();
        
        if (pedidos.length === 0) {
            await message.reply('üìù N√£o h√° pedidos ativos no momento.');
            return;
        }

        let mensagem = '*üìã Pedidos Ativos:*\n\n';
        
        for (const pedido of pedidos) {
            const items = JSON.parse(pedido.items);
            mensagem += `*Pedido #${pedido.id}*\n`;
            mensagem += `üì± Cliente: ${pedido.cliente_nome}\n`;
            mensagem += `üìû Contato: ${formatarNumero(pedido.cliente_numero)}\n`;
            mensagem += `üí∞ Valor: R$ ${pedido.valor_total.toFixed(2)}\n`;
            mensagem += `üìç Endere√ßo: ${pedido.endereco}\n`;
            mensagem += `üí≥ Pagamento: ${pedido.forma_pagamento}\n`;
            mensagem += `üïí Status: ${formatarStatus(pedido.status)}\n`;
            
            mensagem += '\n*Itens:*\n';
            items.forEach((item, index) => {
                mensagem += `${index + 1}. ${item.nome}\n`;
                if (item.adicionais && item.adicionais.length > 0) {
                    item.adicionais.forEach(adicional => {
                        mensagem += `   ‚Ä¢ ${adicional.nome}\n`;
                    });
                }
            });
            
            mensagem += '\n-------------------\n\n';
        }

        mensagem += `*Total de pedidos ativos:* ${pedidos.length}\n\n`;
        mensagem += '*Comandos dispon√≠veis:*\n';
        mensagem += '‚Ä¢ /confirmar [n√∫mero]\n';
        mensagem += '‚Ä¢ /preparando [n√∫mero]\n';
        mensagem += '‚Ä¢ /saiuentrega [n√∫mero]\n';
        mensagem += '‚Ä¢ /entregue [n√∫mero]\n';
        mensagem += '‚Ä¢ /cancelar [n√∫mero]';

        await message.reply(mensagem);
    } catch (error) {
        console.error('Erro ao listar pedidos:', error);
        await message.reply('‚ùå Erro ao buscar pedidos ativos.');
    }
}

function formatarNumero(numero) {
    // Remove o @c.us do final do n√∫mero
    return numero.replace('@c.us', '');
}

function formatarStatus(status) {
    switch (status) {
        case STATUS_PEDIDO.PENDENTE:
            return 'üìù Pendente';
        case STATUS_PEDIDO.CONFIRMADO:
            return '‚úÖ Confirmado';
        case STATUS_PEDIDO.PREPARANDO:
            return 'üë®‚Äçüç≥ Em preparo';
        case STATUS_PEDIDO.SAIU_ENTREGA:
            return 'üõµ Saiu para entrega';
        case STATUS_PEDIDO.ENTREGUE:
            return 'üéâ Entregue';
        case STATUS_PEDIDO.CANCELADO:
            return '‚ùå Cancelado';
        default:
            return '‚ùì Desconhecido';
    }
}

async function enviarAjudaAdmin(message) {
    if (!NUMEROS_ADMIN.includes(message.from)) {
        return false;
    }

    const ajuda = `*üîß Comandos Administrativos:*

/pedidos - Ver todos os pedidos ativos
/confirmar [n√∫mero] - Confirmar pedido
/preparando [n√∫mero] - Marcar como em preparo
/saiuentrega [n√∫mero] - Marcar como saiu para entrega
/entregue [n√∫mero] - Marcar como entregue
/cancelar [n√∫mero] - Cancelar pedido

*Exemplo:* /confirmar 123

*Observa√ß√µes:*
‚Ä¢ Use /pedidos para ver todos os pedidos ativos
‚Ä¢ Substitua [n√∫mero] pelo n√∫mero real do pedido
‚Ä¢ Os comandos s√£o irrevers√≠veis
‚Ä¢ Use com aten√ß√£o`;

    await message.reply(ajuda);
    return true;
}

async function notificarCliente(numeroPedido, status) {
    try {
        if (!whatsappClient) {
            console.error('Cliente WhatsApp n√£o inicializado');
            return;
        }

        const pedido = await buscarPedidoAtivo(numeroPedido);
        if (!pedido) return;

        let mensagem = `*üîî Atualiza√ß√£o do Pedido #${numeroPedido}*\n\n`;
        
        switch (status) {
            case STATUS_PEDIDO.CONFIRMADO:
                mensagem += '‚úÖ Seu pedido foi confirmado e em breve entrar√° em preparo!';
                break;
            case STATUS_PEDIDO.PREPARANDO:
                mensagem += 'üë®‚Äçüç≥ Seu pedido est√° sendo preparado com muito carinho!';
                break;
            case STATUS_PEDIDO.SAIU_ENTREGA:
                mensagem += 'üõµ Oba! Seu pedido saiu para entrega e logo chegar√° at√© voc√™!';
                break;
            case STATUS_PEDIDO.ENTREGUE:
                mensagem += 'üéâ Pedido entregue! Bom apetite!\n\nAgradecemos a prefer√™ncia! Para fazer um novo pedido, digite *card√°pio*.';
                break;
            case STATUS_PEDIDO.CANCELADO:
                mensagem += '‚ùå Seu pedido foi cancelado. Em caso de d√∫vidas, digite *atendente* para falar com nossa equipe.';
                break;
        }

        await whatsappClient.sendMessage(pedido.cliente_numero, mensagem);
    } catch (error) {
        console.error('Erro ao notificar cliente:', error);
    }
}

// Fun√ß√£o para formatar o n√∫mero no padr√£o correto
function formatarNumeroAdmin(numero) {
    // Remove qualquer formata√ß√£o existente
    let numeroLimpo = numero.replace(/\D/g, '');
    
    // Se o n√∫mero n√£o come√ßar com 55, adiciona
    if (!numeroLimpo.startsWith('55')) {
        numeroLimpo = '55' + numeroLimpo;
    }
    
    // Adiciona o sufixo @c.us
    return numeroLimpo + '@c.us';
}

module.exports = {
    processarComandoAdmin,
    enviarAjudaAdmin,
    NUMEROS_ADMIN,
    inicializarAdmin
}; 